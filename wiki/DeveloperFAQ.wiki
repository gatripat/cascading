#summary Answers to common questions

= Developer FAQ =

=== How do I convert String tuple values to their primitive types for more efficient storage? ===

 Use the c.o.Identity class to coerce values to new types. If a tuple value is "1234", you could coerce it to a Integer. For example:
{{{
  pipe = new Each( pipe, new Fields("index_string"), new Identity( new Fields("index"), Integer.class), Fields.ALL );
}}}

=== What do all these constants on the c.t.Fields class mean? ===

 See the javadoc for details. In short, they represent logical groups of fields, so that pipe assemblies don't need to hard code field names if they perform common operations. For example, Fields.ALL represents all the fields in the current stream, i.e. a wild card. Fields.KEYS represent the grouping fields used by a previous c.p.Group pipe.

=== Can I reference tuple values by position instead of by field name? ===

 Yes. Indexing starts at 0. Thus new Fields( 3 ) would select the 4th item in a Tuple. You can also use relative positions. -1 would return the last, and -2 the second to last value s in a Tuple. Field names and positions can be used together, new Fields( "name" , -1 ).

=== How do I create my own filter class? ===

 Your new filter must extend c.o.Operation and implement c.o.Filter. Your implementation must always declare the fields Fields.ALL. For example:
{{{
  public ANewFilter()
    {
    super( ANY, Fields.ALL );
    }
}}}

== Not yet released, available via svn ==

=== How do I print my tuple stream for debugging? ===

 Use the c.o.Debug filter. By default it will print your tuple stream to stderr. 